Actualiza el sistema de agendamiento en React + TypeScript + Tailwind + PostgreSQL para que capture, procese y almacene las siguientes variables:

### üìã Formulario (Frontend)

Agrega un nuevo campo llamado `call_type` con un selector:

- Opci√≥n 1: Llamada telef√≥nica
- Opci√≥n 2: Videollamada

Cuando el usuario elige ‚ÄúLlamada telef√≥nica‚Äù, debe mostrarse un campo adicional de tipo `tel` para capturar el n√∫mero telef√≥nico. Este campo debe ser obligatorio **solo si** se elige ‚ÄúLlamada telef√≥nica‚Äù.

Cuando el usuario elige ‚ÄúVideollamada‚Äù, no se muestra el campo de tel√©fono. En cambio, se debe generar din√°micamente un link de Jitsi con el siguiente formato:

https://meet.jit.si/somaspace-{fecha}-{hora}

markdown
Copiar
Editar

Este link debe incluirse en los datos que se env√≠an al backend.

Al enviar el formulario:
- Validar todos los campos requeridos
- Enviar un `POST` al endpoint `/api/appointments` con los datos

### üß† Backend (Node.js + Express + PostgreSQL)

Actualiza el handler `/api/appointments` para que:
1. Reciba y valide estos campos:
   - `name`
   - `email`
   - `date`
   - `time`
   - `call_type`
   - `message` (opcional)
   - `phone` (solo si `call_type === 'telefono'`)
   - `jitsi_url` (solo si `call_type === 'videollamada'`)

2. Inserte los datos en la tabla `appointments` con la siguiente estructura:

```sql
CREATE TABLE appointments (
  id UUID PRIMARY KEY DEFAULT gen_random_uuid(),
  name TEXT NOT NULL,
  email TEXT NOT NULL,
  date DATE NOT NULL,
  time TEXT NOT NULL,
  call_type TEXT NOT NULL,
  phone TEXT,
  jitsi_url TEXT,
  message TEXT,
  created_at TIMESTAMP DEFAULT now()
);
Si call_type === 'videollamada', el backend tambi√©n puede generar el link de Jitsi con:

ts
Copiar
Editar
const jitsiUrl = `https://meet.jit.si/somaspace-${date}-${time}`;
Env√≠a los datos completos a tu correo (hola@somaspace.site) usando nodemailer y Zoho SMTP.

Asunto: Nueva cita agendada

Cuerpo: todos los datos + link Jitsi si aplica

Usa variables de entorno: ZOHO_USER y ZOHO_PASS

El handler debe responder con JSON: { success: true, message: 'Cita agendada con √©xito' } o error si falla algo.

üîê Extra
Opcionalmente, deja comentado un bloque para conectar esta cita m√°s adelante con Zoho Calendar mediante OAuth o Make.

Mant√©n todo modular, limpio y con validaci√≥n clara tanto en frontend como backend.

yaml
Copiar
Editar

---

Con este prompt el bot puede dejar **todo listo para producci√≥n**, solo necesitas conectar tu `.env` y listo. ¬øQ